package greenDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greenDao.ConversationGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONVERSATION_GROUP.
*/
public class ConversationGroupDao extends AbstractDao<ConversationGroup, Long> {

    public static final String TABLENAME = "CONVERSATION_GROUP";

    /**
     * Properties of entity ConversationGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConversationId = new Property(1, long.class, "ConversationId", false, "CONVERSATION_ID");
        public final static Property ContactId = new Property(2, long.class, "ContactId", false, "CONTACT_ID");
    };

    private DaoSession daoSession;

    private Query<ConversationGroup> conversation_ConversationGroupListQuery;
    private Query<ConversationGroup> contact_ConversationGroupListQuery;

    public ConversationGroupDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONVERSATION_GROUP' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONVERSATION_ID' INTEGER NOT NULL ," + // 1: ConversationId
                "'CONTACT_ID' INTEGER NOT NULL );"); // 2: ContactId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONVERSATION_GROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ConversationGroup entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getConversationId());
        stmt.bindLong(3, entity.getContactId());
    }

    @Override
    protected void attachEntity(ConversationGroup entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ConversationGroup readEntity(Cursor cursor, int offset) {
        ConversationGroup entity = new ConversationGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // ConversationId
            cursor.getLong(offset + 2) // ContactId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ConversationGroup entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConversationId(cursor.getLong(offset + 1));
        entity.setContactId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ConversationGroup entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ConversationGroup entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "conversationGroupList" to-many relationship of Conversation. */
    public List<ConversationGroup> _queryConversation_ConversationGroupList(long ConversationId) {
        synchronized (this) {
            if (conversation_ConversationGroupListQuery == null) {
                QueryBuilder<ConversationGroup> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ConversationId.eq(null));
                conversation_ConversationGroupListQuery = queryBuilder.build();
            }
        }
        Query<ConversationGroup> query = conversation_ConversationGroupListQuery.forCurrentThread();
        query.setParameter(0, ConversationId);
        return query.list();
    }

    /** Internal query to resolve the "conversationGroupList" to-many relationship of Contact. */
    public List<ConversationGroup> _queryContact_ConversationGroupList(long ContactId) {
        synchronized (this) {
            if (contact_ConversationGroupListQuery == null) {
                QueryBuilder<ConversationGroup> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ContactId.eq(null));
                contact_ConversationGroupListQuery = queryBuilder.build();
            }
        }
        Query<ConversationGroup> query = contact_ConversationGroupListQuery.forCurrentThread();
        query.setParameter(0, ContactId);
        return query.list();
    }

}
